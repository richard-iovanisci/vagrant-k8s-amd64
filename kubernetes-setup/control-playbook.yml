---
- hosts: all
  become: true
  tasks:

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

# Install Docker and its dependent components
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - docker-ce=5:23.0.1-1~ubuntu.20.04~focal
        - docker-ce-cli=5:23.0.1-1~ubuntu.20.04~focal
        - containerd.io=1.6.19-1
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

# Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

# Installing kubelet, kubeadm and kubectl using the below code
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.26.3-00
        - kubeadm=1.26.3-00
        - kubectl=1.26.3-00

  # containerd toml refresh
  - name: remove containerd toml 
    command: rm /etc/containerd/config.toml
  - name: restart containerd
    command: sudo systemctl restart containerd

  - name: Configure worker ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

# Initialize the Kubernetes cluster with kubeadm using the below code (applicable only on control node)
  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name control-plane --pod-network-cidr=192.168.0.0/16 --v=6

# Setup the kube config file for the vagrant user to access the Kubernetes cluster using the below code
  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

# Setup the container networking provider and the network policy engine using the below code
## New commands taken from here: https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart
### Install Calico Network
  - name: Install tigera-operator
    become: false
    command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/tigera-operator.yaml
  - name: Install custom-resources
    become: false
    command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/custom-resources.yaml

# Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
    become_user: rich-iovanisci

# Setup alias
  - name: Add kubectl alias for vagrant user
    lineinfile:
      path: /home/vagrant/.bashrc
      line: 'alias k=kubectl'
      state: present
    become: false

  - name: Copy post-init directory to vagrant user's home directory
    synchronize:
      src: ../post-init/
      dest: /home/vagrant/post-init/
      owner: yes
      group: yes
      recursive: yes
    become: true
    become_user: vagrant


# Setup a handler for checking Docker daemon using the below code
  handlers:
    - name: docker status
      service: name=docker state=started
